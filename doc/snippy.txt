*snippy.txt* Snippet plugin for neovim.

Snippy                                                                *snippy*

==============================================================================
CONTENTS                                                     *snippy-contents*

    INTRODUCTION.........................|snippy-introduction|
    USAGE................................|snippy-usage|
    FUNCTIONS............................|snippy-functions|
    OPTIONS..............................|snippy-options|
    COMMANDS.............................|snippy-commands|
    LICENSE..............................|snippy-license|


==============================================================================
INTRODUCTION                                             *snippy-introduction*

Snippy is a lua-based snippets plugin for Neovim.


==============================================================================
USAGE                                                           *snippy-usage*

                                                          *snippy-usage-setup*

Snippy includes an optional |snippy.setup()| function for you to quickly
configure it according to your needs. See the |snippy-options| section for
information on the available options. Below is an example showing most of the
available options:
>
    require('snippy').setup({
        snippet_dirs = '~/snippets',
        hl_group = 'Search',
        scopes = {
            _ = { },

            lua = function(scopes)
                if vim.api.nvim_buf_get_name(0):find('_spec.lua$') then
                    table.insert(scopes, 'busted')
                end
                return scopes
            end,

            php = { '_', 'php', 'html', 'javascript' },
        end
    })
<
It's also possible to define options for a specific buffer using the
|snippy.setup_buffer()| function. Example:
>
    autocmd BufRead,BufNewFile *_spec.lua lua require('snippy').setup_buffer(0,
        \ { scopes = { '_', 'lua', 'busted' } })
<

                                                       *snippy-usage-mappings*

Snippy comes with no mappings activated by default. So you'll want to define
some, probably.

For example, to use `<Tab>` to expand and jump forward, `<S-Tab` to jump back:
>
    imap <expr> <Tab> snippy#can_expand_or_advance() ? '<Plug>(snippy-expand-or-next)' : '<Tab>'
    imap <expr> <S-Tab> snippy#can_jump(-1) ? '<Plug>(snippy-previous)' : '<Tab>'
    smap <expr> <Tab> snippy#can_jump(1) ? '<Plug>(snippy-next)' : '<Tab>'
    smap <expr> <S-Tab> snippy#can_jump(-1) ? '<Plug>(snippy-previous)' : '<Tab>'
<
Of course, you can also define different mappings to expand and jump forward.
To expand with `<C-]>`, jump forward with `<C-j>`, and jump back with `<C-k>`,
set it up like this:
>
    imap <expr> <C-]> snippy#can_expand() ? '<Plug>(snippy-expand)' : '<C-]>'
    imap <expr> <C-j> snippy#can_jump(1) ? '<Plug>(snippy-next)' : '<C-j>'
    imap <expr> <C-k> snippy#can_jump(-1) ? '<Plug>(snippy-previous)' : '<C-k>'
    smap <expr> <C-j> snippy#can_jump(1) ? '<Plug>(snippy-next)' : '<C-j>'
    smap <expr> <C-k> snippy#can_jump(-1) ? '<Plug>(snippy-previous)' : '<C-k>'
<
You can optionally define mappings for cutting the currently selected text, to
be used later by the `$VISUAL` or `$TM_SELECTED_TEXT` variables:
>
    nmap g<Tab> <Plug>(snippy-cut-text)
    xmap <Tab> <Plug>(snippy-cut-text)
<
When mapping from Lua using |nvim_set_keymap()|, you can use
|snippy.can_expand()| and |snippy.can_jump()| functions. The Vimscript
functions above are just convenience wrappings around those.

                                                       *snippy-usage-snippets*

By default every `snippets` directory in |runtimepath| will be searched for
snippets. Snippy uses the same format as SnipMate, so the following patterns
are accepted:
    - snippets/{filetype}.snippets
    - snippets/{filetype}_{name}.snippets
    - snippets/{filetype}/{name}.snippets
    - snippets/{filetype}.snippet
    - snippets/{filetype}/{trigger}.snippet
    - snippets/{filetype}/{trigger}/{description}.snippet

Files with the `.snippet` extension contain a single snippet, while files with
the `.snippets` extension can be used declare multiple snippets using the
following format:
>
    snippet trigger1 "Description for snippet 1"
    	This is the first line.
    	This is the second line.
    snippet trigger2 "Description for snippet 2"
    	This is the first line.
    	This is the second line.
<
Note: Snippy follows the |runtimepath| order when loading snippets, which
means snippets defined in folders coming later in the list will always
override those loaded before. So, if you put your custom snippets in
`after/snippets/`, they should override any snippets provided by plugins in
case of name conflict.

                                                         *snippy-usage-scopes*

Scopes are the term used in Snippy to refer to a group of snippets that should
be loaded for a filetype. They are generally named after the filetype they
were created for. You can, however, give them any name you want, as long as
you tell Snippy to load them for a filetype using the `scopes` setup option.

The global scope is identified by `_`. Snippets in the global scope will be
loaded for every filetype.


==============================================================================
SNIPPET SYNTAX                                         *snippy-snippet-syntax*

Snippy should be compatible with the full LSP snippet syntax, which in turn is
based on the original TextMate syntax. Additionally, the SnipMate syntax is
supported for compatibility.

Currently the parser for a particular snippet is chosen based on the the
source the snippet was loaded from. If it was loaded from a SnipMate file, the
SnipMate-style parser will be used. The default behavior is to parse using the
LSP syntax parser.

------------------------------------------------------------------------------
LSP Snippet Syntax                                         *snippy-lsp-syntax*

The full LSP snippet syntax can be found at
https://github.com/Microsoft/language-server-protocol/blob/main/snippetSyntax.md.

The only point where Snippy deviates from the LSP syntax in in the handling of
transformations. Transformations are very complex and require support for
Javascript regex parsing. Instead we support Vim-based regular expressions and
a simplified format, which see |snippy-snipmate-transform| below for more
details.

Note: the LSP syntax is only supported when expanding LSP provided completion
items. When expanding snippets defined in `.snippet(s)` files, SnipMate's
syntax is used instead.


------------------------------------------------------------------------------
SnipMate's Syntax                                     *snippy-snipmate-syntax*

SnipMate syntax is also based on the TextMate syntax and so largely compatible
with the LSP syntax. A basic SniMate-style snippet looks like this:
>
    for (${1:i} = 0; $1 < ${2:limit}; $1++) {
    	System.out.println($1);
    }
<
                                                        *snippy-snipmate-eval*

This syntax also allows Vim code to be evaluated inside backticks (``):
>
    Current date is `strftime('%c')`
<
                                                   *snippy-snipmate-transform*

Transformations are supported for tabstops and variables, with the caveat that
Vim regular expressions are to be used instead of Javascript ones. The
`format` part is also a Vim regular substitution pattern. For instance:
>
    This ${1:word} will be changed to uppercase: ${1/.*/\U\0/g}
<
Will result in:
>
    This word will be changed to uppercase: WORD
<
                                                      *snippy-snipmate-visual*

The special variable `$VISUAL` holds text previously selected and stored using
the `snippy.cut_text()` function or the `<plug>(snippy-cut-text)` mapping.
This is equivalent to the `$TM_SELECTED_TEXT` variable defined by the
TextMate/LSP syntax.


==============================================================================
FUNCTIONS                                                   *snippy-functions*

snippy.setup({options})                                       *snippy.setup()*
    Set initial configuration for the plugin. See also |snippy-options|.

snippy.setup_buffer({bufnr}, {options})                *snippy.setup_buffer()*
    Set configuration for the current buffer. See also
    |snippy-buffer-options|.

snippy.can_expand()                                      *snippy.can_expand()*
    Checks if a snippet can be expanded at the current location.

snippy.can_jump({direction})                               *snippy.can_jump()*
    Checks if a jump in the indicated direction can be performed at the
    current location.

    {direction} is a integer. You can pass `-1` or  `1` to mean backward or
    forward respectively.

snippy.can_expand_or_advance()                *snippy.can_expand_or_advance()*
    Checks if a snippet can be expanded or a forward jump can be performed at
    the current location.

snippy.expand()                                              *snippy.expand()*
    Expands the current trigger at the current location.

snippy.expand_or_next()                              *snippy.expand_or_next()*
    Expands the current trigger if possible. Otherwise jumps to the next
    available stop.

snippy.next()                                                  *snippy.next()*
    Jumps to the next available stop.

snippy.previous()                                          *snippy.previous()*
    Jumps to the previous available stop.

snippy.expand_snippet({snippet}[, {trigger}])        *snippy.expand_snippet()*
    Expands {snippet} with {trigger} at the current cursor position.

    {trigger} is optional.

snippy.cut_text({mode}, {visual})                          *snippy.cut_text()*
    Cuts and stores the currently selected text, to be used later.

    {mode} is a string returned by |mode()|.

    {visual} indicates whether the function was called from visual mode.

snippy.is_active()                                        *snippy.is_active()*
    Checks whether there is an active snippet.

snippy.get_completion_items()                  *snippy.get_completion_items()*
    Returns a list of completion all items available in the current scope.

snippy.complete()                                          *snippy.complete()*
    Shows a basic completion menu at the current location.

snippy.complete_done()                                *snippy.complete_done()*
    To be called when the |CompleteDone| |autocmd| is fired, expanding any snippet
    present in the |v:completed_item| variable. Example:
>
    autocmd CompleteDone * lua require 'snippy'.complete_done()
<
Some Vimscript |autoload| functions are also provided for convenience,
specially for mappings:

snippy#can_expand()                                      *snippy#can_expand()*
    See |snippy.can_expand()|.

snippy#can_jump({direction})                               *snippy#can_jump()*
    See |snippy.can_jump()|.

snippy#can_expand_or_advance()                *snippy#can_expand_or_advance()*
    See |snippy.can_expand_or_advance()|.


==============================================================================
OPTIONS                                                       *snippy-options*

This plugin can be configured by passing a dictionary to the lua function
`snippy.setup(...)`. The following options are supported:

snippet_dirs ~
    A comma-separated (if a |String|) list of directories containing snippets.
        Type: |String| or |List|
        Default: vim.api.nvim_list_runtime_paths()

hl_group ~
    Highlight group used for placeholders.
        Type: |String|
        Default: nil

scopes ~
    A table with filetypes as keys. Each value must be a table containing a
    list of scopes or a function that receives the calculated list of scopes
    for the current buffer and should return a new (possibly modified) list of
    scopes.
        Type: |Table|
        Default: nil


==============================================================================
BUFFER OPTIONS                                         *snippy-buffer-options*

It is also possible to set configuration specific to abuffer by calling
`snippy.setup_buffer(...)` function. The following options are supported:

scopes ~
    Can be set to a table containing a list of scopes or a function that
    receives the calculated list of scopes for the current buffer and should
    return a new (possibly modified) list of scopes.
        Type: ||Table|
        Default: nil


==============================================================================
COMMANDS                                                     *snippy-commands*

:SnippyEdit {file}                                                |SnippyEdit|

    Opens an existing snippet file in a new split. Completion available.

:SnippyReload                                                  |SnippyReload|

    Invalidates current cache, allowing newly added/edited snippets to be
    loaded.


==============================================================================
LICENCE                                                       *snippy-license*

Snippy is licensed under the MIT license.


==============================================================================
vim:tw=78:ts=8:ft=help:norl:
